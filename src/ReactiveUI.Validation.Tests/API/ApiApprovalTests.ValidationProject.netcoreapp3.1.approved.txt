[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace ReactiveUI.Validation.Abstractions
{
    public interface IValidatableViewModel
    {
        ReactiveUI.Validation.Contexts.ValidationContext ValidationContext { get; }
    }
}
namespace ReactiveUI.Validation.Collections
{
    public class ValidationText : System.Collections.Generic.IEnumerable<string>, System.Collections.IEnumerable
    {
        public ValidationText() { }
        public ValidationText(System.Collections.Generic.IEnumerable<ReactiveUI.Validation.Collections.ValidationText> validationTexts) { }
        public ValidationText(string text) { }
        public int Count { get; }
        public string this[int index] { get; }
        public void Add(string text) { }
        public void Clear() { }
        public System.Collections.Generic.IEnumerator<string> GetEnumerator() { }
        public string ToSingleLine(string? separator = ",") { }
    }
}
namespace ReactiveUI.Validation.Comparators
{
    public class ValidationStateComparer : System.Collections.Generic.EqualityComparer<ReactiveUI.Validation.States.ValidationState>
    {
        public ValidationStateComparer() { }
        public override bool Equals(ReactiveUI.Validation.States.ValidationState x, ReactiveUI.Validation.States.ValidationState y) { }
        public override int GetHashCode(ReactiveUI.Validation.States.ValidationState obj) { }
    }
}
namespace ReactiveUI.Validation.Components.Abstractions
{
    public interface IPropertyValidationComponent : ReactiveUI.Validation.Components.Abstractions.IValidatesProperties, ReactiveUI.Validation.Components.Abstractions.IValidationComponent { }
    [System.Obsolete("Consider using the non-generic version of an IPropertyValidationComponent.")]
    public interface IPropertyValidationComponent<TViewModel> : ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidationComponent { }
    public interface IValidatesProperties
    {
        System.Collections.Generic.IEnumerable<string> Properties { get; }
        int PropertyCount { get; }
        bool ContainsPropertyName(string propertyName, bool exclusively = false);
    }
    [System.Obsolete("Consider using the non-generic version of an IValidatesProperties.")]
    public interface IValidatesProperties<TViewModel> : ReactiveUI.Validation.Components.Abstractions.IValidatesProperties
    {
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Consider using the non-generic version of an IValidatesProperties.")]
        bool ContainsProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> propertyExpression, bool exclusively = false);
    }
    public interface IValidationComponent
    {
        bool IsValid { get; }
        ReactiveUI.Validation.Collections.ValidationText? Text { get; }
        System.IObservable<ReactiveUI.Validation.States.ValidationState> ValidationStatusChange { get; }
    }
}
namespace ReactiveUI.Validation.Components
{
    public abstract class BasePropertyValidation<TViewModel> : ReactiveUI.ReactiveObject, ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent, ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidationComponent, System.IDisposable
    {
        protected BasePropertyValidation() { }
        public bool IsValid { get; }
        public System.Collections.Generic.IEnumerable<string> Properties { get; }
        public int PropertyCount { get; }
        public ReactiveUI.Validation.Collections.ValidationText? Text { get; }
        public System.IObservable<ReactiveUI.Validation.States.ValidationState> ValidationStatusChange { get; }
        protected void AddProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> property) { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Consider using the non-generic ContainsProperty of a non-generic IPropertyValidat" +
            "ionComponent.")]
        public bool ContainsProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> property, bool exclusively = false) { }
        public bool ContainsPropertyName(string propertyName, bool exclusively = false) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        protected abstract System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable();
    }
    public sealed class BasePropertyValidation<TViewModel, TViewModelProperty> : ReactiveUI.Validation.Components.BasePropertyValidation<TViewModel>
    {
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Func<TViewModelProperty, bool> isValidFunc, System.Func<TViewModelProperty, string> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Func<TViewModelProperty, bool> isValidFunc, System.Func<TViewModelProperty, bool, string> messageFunc) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Func<TViewModelProperty, bool> isValidFunc, string message) { }
        protected override void Dispose(bool disposing) { }
        protected override System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable() { }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.Obsolete("Consider using ObservableValidation<TViewModel, bool> instead.")]
    public abstract class ModelObservableValidationBase<TViewModel> : ReactiveUI.ReactiveObject, ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent, ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidationComponent, System.IDisposable
    {
        protected ModelObservableValidationBase(TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> validityObservable, System.Func<TViewModel, bool, ReactiveUI.Validation.Collections.ValidationText> messageFunc) { }
        public bool IsValid { get; }
        public System.Collections.Generic.IEnumerable<string> Properties { get; }
        public int PropertyCount { get; }
        public ReactiveUI.Validation.Collections.ValidationText? Text { get; }
        public System.IObservable<ReactiveUI.Validation.States.ValidationState> ValidationStatusChange { get; }
        protected void AddProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> property) { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Consider using the non-generic ContainsProperty of a non-generic IPropertyValidat" +
            "ionComponent.")]
        public bool ContainsProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> property, bool exclusively = false) { }
        public bool ContainsPropertyName(string propertyName, bool exclusively = false) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.Obsolete("Consider using ObservableValidation<TViewModel, bool> instead.")]
    public class ModelObservableValidation<TViewModel> : ReactiveUI.Validation.Components.ModelObservableValidationBase<TViewModel>
    {
        public ModelObservableValidation(TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> validityObservable, System.Func<TViewModel, string> message) { }
        public ModelObservableValidation(TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> validityObservable, System.Func<TViewModel, bool, string> messageFunc) { }
        public ModelObservableValidation(TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> validityObservable, string message) { }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.Obsolete("Consider using ObservableValidation<TViewModel, bool, TViewModelProp> instead.")]
    public class ModelObservableValidation<TViewModel, TViewModelProp> : ReactiveUI.Validation.Components.ModelObservableValidationBase<TViewModel>
    {
        public ModelObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModel, System.IObservable<bool>> validityObservable, System.Func<TViewModel, string> message) { }
        public ModelObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModel, System.IObservable<bool>> validityObservable, System.Func<TViewModel, bool, string> messageFunc) { }
        public ModelObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModel, System.IObservable<bool>> validityObservable, string message) { }
    }
    public abstract class ObservableValidationBase<TViewModel, TValue> : ReactiveUI.ReactiveObject, ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent, ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties, ReactiveUI.Validation.Components.Abstractions.IValidatesProperties<TViewModel>, ReactiveUI.Validation.Components.Abstractions.IValidationComponent, System.IDisposable
    {
        protected ObservableValidationBase(TViewModel viewModel, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, System.Func<TViewModel, TValue, bool, ReactiveUI.Validation.Collections.ValidationText> messageFunc) { }
        public bool IsValid { get; }
        public System.Collections.Generic.IEnumerable<string> Properties { get; }
        public int PropertyCount { get; }
        public ReactiveUI.Validation.Collections.ValidationText? Text { get; }
        public System.IObservable<ReactiveUI.Validation.States.ValidationState> ValidationStatusChange { get; }
        protected void AddProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> property) { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Consider using the non-generic ContainsProperty of a non-generic IPropertyValidat" +
            "ionComponent.")]
        public bool ContainsProperty<TProp>(System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> property, bool exclusively = false) { }
        public bool ContainsPropertyName(string propertyName, bool exclusively = false) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
    }
    public sealed class ObservableValidation<TViewModel, TValue> : ReactiveUI.Validation.Components.ObservableValidationBase<TViewModel, TValue>
    {
        public ObservableValidation(TViewModel viewModel, System.IObservable<TValue> observable, System.Func<TValue, bool> isValidFunc, System.Func<TValue, string> messageFunc) { }
        public ObservableValidation(TViewModel viewModel, System.IObservable<TValue> observable, System.Func<TValue, bool> isValidFunc, string message) { }
        public ObservableValidation(TViewModel viewModel, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, System.Func<TViewModel, TValue, string> messageFunc) { }
        public ObservableValidation(TViewModel viewModel, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, System.Func<TViewModel, TValue, bool, string> messageFunc) { }
        public ObservableValidation(TViewModel viewModel, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, string message) { }
    }
    public sealed class ObservableValidation<TViewModel, TValue, TProp> : ReactiveUI.Validation.Components.ObservableValidationBase<TViewModel, TValue>
    {
        public ObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> viewModelProperty, System.IObservable<TValue> observable, System.Func<TValue, bool> isValidFunc, System.Func<TValue, string> messageFunc) { }
        public ObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> viewModelProperty, System.IObservable<TValue> observable, System.Func<TValue, bool> isValidFunc, string message) { }
        public ObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> viewModelProperty, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, System.Func<TViewModel, TValue, string> messageFunc) { }
        public ObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> viewModelProperty, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, System.Func<TViewModel, TValue, bool, string> messageFunc) { }
        public ObservableValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> viewModelProperty, System.IObservable<TValue> observable, System.Func<TViewModel, TValue, bool> isValidFunc, string message) { }
    }
}
namespace ReactiveUI.Validation.Contexts
{
    public class ValidationContext : ReactiveUI.ReactiveObject, ReactiveUI.Validation.Components.Abstractions.IValidationComponent, System.IDisposable
    {
        public ValidationContext(System.Reactive.Concurrency.IScheduler? scheduler = null) { }
        public bool IsValid { get; }
        public ReactiveUI.Validation.Collections.ValidationText Text { get; }
        public System.IObservable<bool> Valid { get; }
        public System.IObservable<ReactiveUI.Validation.States.ValidationState> ValidationStatusChange { get; }
        public System.Collections.ObjectModel.ReadOnlyObservableCollection<ReactiveUI.Validation.Components.Abstractions.IValidationComponent> Validations { get; }
        public void Add(ReactiveUI.Validation.Components.Abstractions.IValidationComponent validation) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public bool GetIsValid() { }
        public void Remove(ReactiveUI.Validation.Components.Abstractions.IValidationComponent validation) { }
        public void RemoveMany(System.Collections.Generic.IEnumerable<ReactiveUI.Validation.Components.Abstractions.IValidationComponent> validations) { }
    }
}
namespace ReactiveUI.Validation.Extensions
{
    public static class ValidatableViewModelExtensions
    {
        public static void ClearValidationRules<TViewModel>(this TViewModel viewModel)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static void ClearValidationRules<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static System.IObservable<bool> IsValid<TViewModel>(this TViewModel viewModel)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Use the overload accepting just IObservable<bool> instead of Func<TViewModel, IOb" +
            "servable<bool>>")]
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel>(this TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> viewModelObservableProperty, System.Func<TViewModel, string> messageFunc)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("This overload is planned for future removal. Consider using either the overload t" +
            "hat accepts a Func<TViewModel, string> as the messageFunc parameter, or the over" +
            "load that accepts a string.")]
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel>(this TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> viewModelObservableProperty, System.Func<TViewModel, bool, string> messageFunc)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Use the overload accepting just IObservable<bool> instead of Func<TViewModel, IOb" +
            "servable<bool>>")]
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel>(this TViewModel viewModel, System.Func<TViewModel, System.IObservable<bool>> viewModelObservableProperty, string message)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel>(this TViewModel viewModel, System.IObservable<bool> validationObservable, string message)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TValue>(this TViewModel viewModel, System.IObservable<TValue> validationObservable, System.Func<TValue, bool> isValidFunc, System.Func<TValue, string> messageFunc)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Use the overload accepting just IObservable<bool> instead of Func<TViewModel, IOb" +
            "servable<bool>>")]
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModel, System.IObservable<bool>> viewModelObservableProperty, System.Func<TViewModel, string> messageFunc)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("This overload is planned for future removal. Consider using either the overload t" +
            "hat accepts a Func<TViewModel, string> as the messageFunc parameter, or the over" +
            "load that accepts a string.")]
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModel, System.IObservable<bool>> viewModelObservableProperty, System.Func<TViewModel, bool, string> messageFunc)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Use the overload accepting just IObservable<bool> instead of Func<TViewModel, IOb" +
            "servable<bool>>")]
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModel, System.IObservable<bool>> viewModelObservableProperty, string message)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModelProp, bool> isPropertyValid, System.Func<TViewModelProp, string> message)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.Func<TViewModelProp, bool> isPropertyValid, string message)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.IObservable<bool> viewModelObservable, string message)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.Helpers.ValidationHelper ValidationRule<TViewModel, TViewModelProp, TValue>(this TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProp>> viewModelProperty, System.IObservable<TValue> viewModelObservable, System.Func<TValue, bool> isValidFunc, System.Func<TValue, string> messageFunc)
            where TViewModel : ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
    }
    public static class ValidatesPropertiesExtensions
    {
        public static bool ContainsProperty<TViewModel, TProp>(this ReactiveUI.Validation.Components.Abstractions.IValidatesProperties validatesProperties, System.Linq.Expressions.Expression<System.Func<TViewModel, TProp>> propertyExpression, bool exclusively = false) { }
    }
    public static class ValidationContextExtensions
    {
        public static System.IObservable<System.Collections.Generic.IList<ReactiveUI.Validation.States.ValidationState>> ObserveFor<TViewModel, TViewModelProperty>(this ReactiveUI.Validation.Contexts.ValidationContext context, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, bool strict = true) { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Since we support adding and removing validation rules dynamically, consider using" +
            " either the ObserveFor extension method, or BindValidation.")]
        public static System.Collections.Generic.IEnumerable<ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent<TViewModel>> ResolveFor<TViewModel, TViewModelProperty>(this ReactiveUI.Validation.Contexts.ValidationContext context, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, bool strict = true) { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Since we support adding and removing validation rules dynamically, consider using" +
            " either the ObserveFor extension method, or BindValidation.")]
        public static System.Collections.Generic.IEnumerable<ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent<TViewModel>> ResolveFor<TViewModel, TProperty1, TProperty2>(this ReactiveUI.Validation.Contexts.ValidationContext context, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> viewModelProperty1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> viewModelProperty2) { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("Since we support adding and removing validation rules dynamically, consider using" +
            " either the ObserveFor extension method, or BindValidation.")]
        public static System.Collections.Generic.IEnumerable<ReactiveUI.Validation.Components.Abstractions.IPropertyValidationComponent<TViewModel>> ResolveFor<TViewModel, TProperty1, TProperty2, TProperty3>(this ReactiveUI.Validation.Contexts.ValidationContext context, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> viewModelProperty1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> viewModelProperty2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> viewModelProperty3) { }
    }
    public static class ViewForExtensions
    {
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("This method is a part of ReactiveUI internals and will be removed from ReactiveUI" +
            ".Validation public API soon.")]
        public static System.IDisposable BindToDirect<TTarget, TValue>(System.IObservable<TValue> @this, TTarget target, System.Linq.Expressions.Expression viewExpression) { }
        public static System.IDisposable BindValidation<TView, TViewModel, TViewProperty>(this TView view, TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static System.IDisposable BindValidation<TView, TViewModel, TViewProperty>(this TView view, TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel?, ReactiveUI.Validation.Helpers.ValidationHelper>> viewModelHelperProperty, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static System.IDisposable BindValidation<TView, TViewModel, TViewModelProperty, TViewProperty>(this TView view, TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.Obsolete("This method is no longer required, BindValidation now supports multiple validatio" +
            "ns.")]
        public static System.IDisposable BindValidationEx<TView, TViewModel, TViewModelProperty, TViewProperty>(this TView view, TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
    }
}
namespace ReactiveUI.Validation.Formatters.Abstractions
{
    public interface IValidationTextFormatter<out TOut>
    {
        TOut Format(ReactiveUI.Validation.Collections.ValidationText validationText);
    }
}
namespace ReactiveUI.Validation.Formatters
{
    public class SingleLineFormatter : ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>
    {
        public SingleLineFormatter(string? separator = null) { }
        public static ReactiveUI.Validation.Formatters.SingleLineFormatter Default { get; }
        public string Format(ReactiveUI.Validation.Collections.ValidationText validationText) { }
    }
}
namespace ReactiveUI.Validation.Helpers
{
    public abstract class ReactiveValidationObject : ReactiveUI.ReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel, System.ComponentModel.INotifyDataErrorInfo
    {
        protected ReactiveValidationObject(System.Reactive.Concurrency.IScheduler? scheduler = null) { }
        public bool HasErrors { get; }
        public ReactiveUI.Validation.Contexts.ValidationContext ValidationContext { get; }
        public event System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs>? ErrorsChanged;
        public virtual System.Collections.IEnumerable GetErrors(string propertyName) { }
        protected void RaiseErrorsChanged(string propertyName = "") { }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.Obsolete("The type parameters are no longer required. Use the non-generic version of Reacti" +
        "veValidationObject.")]
    public abstract class ReactiveValidationObject<TViewModel> : ReactiveUI.Validation.Helpers.ReactiveValidationObject
    {
        protected ReactiveValidationObject(System.Reactive.Concurrency.IScheduler? scheduler = null) { }
    }
    public class ValidationHelper : ReactiveUI.ReactiveObject, System.IDisposable
    {
        public ValidationHelper(ReactiveUI.Validation.Components.Abstractions.IValidationComponent validation, System.IDisposable? cleanup = null) { }
        public bool IsValid { get; }
        public ReactiveUI.Validation.Collections.ValidationText? Message { get; }
        public System.IObservable<ReactiveUI.Validation.States.ValidationState> ValidationChanged { get; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
    }
}
namespace ReactiveUI.Validation.States
{
    public sealed class ValidationState
    {
        public ValidationState(bool isValid, ReactiveUI.Validation.Collections.ValidationText text, ReactiveUI.Validation.Components.Abstractions.IValidationComponent component) { }
        public ValidationState(bool isValid, string text, ReactiveUI.Validation.Components.Abstractions.IValidationComponent component) { }
        public ReactiveUI.Validation.Components.Abstractions.IValidationComponent Component { get; }
        public bool IsValid { get; }
        public ReactiveUI.Validation.Collections.ValidationText Text { get; }
    }
}
namespace ReactiveUI.Validation.TemplateGenerators
{
    public sealed class BasePropertyValidation<TViewModel, TProperty1, TProperty2> : ReactiveUI.Validation.Components.BasePropertyValidation<TViewModel>
    {
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Func<System.ValueTuple<TProperty1, TProperty2>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2>, string> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Func<System.ValueTuple<TProperty1, TProperty2>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2>, bool, ReactiveUI.Validation.Collections.ValidationText> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Func<System.ValueTuple<TProperty1, TProperty2>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2>, bool, string> messageFunc) { }
        protected override void Dispose(bool disposing) { }
        protected override System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable() { }
    }
    public sealed class BasePropertyValidation<TViewModel, TProperty1, TProperty2, TProperty3> : ReactiveUI.Validation.Components.BasePropertyValidation<TViewModel>
    {
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3>, string> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3>, bool, ReactiveUI.Validation.Collections.ValidationText> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3>, bool, string> messageFunc) { }
        protected override void Dispose(bool disposing) { }
        protected override System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable() { }
    }
    public sealed class BasePropertyValidation<TViewModel, TProperty1, TProperty2, TProperty3, TProperty4> : ReactiveUI.Validation.Components.BasePropertyValidation<TViewModel>
    {
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4>, string> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4>, bool, ReactiveUI.Validation.Collections.ValidationText> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4>, bool, string> messageFunc) { }
        protected override void Dispose(bool disposing) { }
        protected override System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable() { }
    }
    public sealed class BasePropertyValidation<TViewModel, TProperty1, TProperty2, TProperty3, TProperty4, TProperty5> : ReactiveUI.Validation.Components.BasePropertyValidation<TViewModel>
    {
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty5>> property5, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5>, string> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty5>> property5, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5>, bool, ReactiveUI.Validation.Collections.ValidationText> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty5>> property5, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5>, bool, string> messageFunc) { }
        protected override void Dispose(bool disposing) { }
        protected override System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable() { }
    }
    public sealed class BasePropertyValidation<TViewModel, TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6> : ReactiveUI.Validation.Components.BasePropertyValidation<TViewModel>
    {
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty5>> property5, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty6>> property6, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6>, string> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty5>> property5, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty6>> property6, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6>, bool, ReactiveUI.Validation.Collections.ValidationText> message) { }
        public BasePropertyValidation(TViewModel viewModel, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty1>> property1, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty2>> property2, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty3>> property3, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty4>> property4, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty5>> property5, System.Linq.Expressions.Expression<System.Func<TViewModel, TProperty6>> property6, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6>, bool> isValidFunc, System.Func<System.ValueTuple<TProperty1, TProperty2, TProperty3, TProperty4, TProperty5, TProperty6>, bool, string> messageFunc) { }
        protected override void Dispose(bool disposing) { }
        protected override System.IObservable<ReactiveUI.Validation.States.ValidationState> GetValidationChangeObservable() { }
    }
}
namespace ReactiveUI.Validation.ValidationBindings.Abstractions
{
    public interface IValidationBinding : System.IDisposable { }
}
namespace ReactiveUI.Validation.ValidationBindings
{
    public sealed class ValidationBinding : ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding, System.IDisposable
    {
        public void Dispose() { }
        public static ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding ForProperty<TView, TViewModel, TViewModelProperty, TOut>(TView view, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Action<System.Collections.Generic.IList<ReactiveUI.Validation.States.ValidationState>, System.Collections.Generic.IList<TOut>> action, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<TOut> formatter, bool strict = true)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding ForProperty<TView, TViewModel, TViewModelProperty, TViewProperty>(TView view, System.Linq.Expressions.Expression<System.Func<TViewModel, TViewModelProperty>> viewModelProperty, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null, bool strict = true)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding ForValidationHelperProperty<TView, TViewModel, TOut>(TView view, System.Linq.Expressions.Expression<System.Func<TViewModel?, ReactiveUI.Validation.Helpers.ValidationHelper>> viewModelHelperProperty, System.Action<ReactiveUI.Validation.States.ValidationState, TOut> action, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<TOut> formatter)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding ForValidationHelperProperty<TView, TViewModel, TViewProperty>(TView view, System.Linq.Expressions.Expression<System.Func<TViewModel?, ReactiveUI.Validation.Helpers.ValidationHelper>> viewModelHelperProperty, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding ForViewModel<TView, TViewModel, TOut>(TView view, System.Action<TOut> action, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<TOut> formatter)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
        public static ReactiveUI.Validation.ValidationBindings.Abstractions.IValidationBinding ForViewModel<TView, TViewModel, TViewProperty>(TView view, System.Linq.Expressions.Expression<System.Func<TView, TViewProperty>> viewProperty, ReactiveUI.Validation.Formatters.Abstractions.IValidationTextFormatter<string>? formatter = null)
            where TView : ReactiveUI.IViewFor<TViewModel>
            where TViewModel :  class, ReactiveUI.IReactiveObject, ReactiveUI.Validation.Abstractions.IValidatableViewModel { }
    }
}